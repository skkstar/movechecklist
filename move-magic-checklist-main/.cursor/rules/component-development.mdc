---
globs: src/components/*.tsx
description: Component development guidelines
---

# 🧩 Component Development Guidelines

## 🏗️ Component Structure
- ✅ **Props Interface** - Always define with TypeScript
- ✅ **Default Values** - Use `defaultValue`, `defaultChecked`
- ✅ **Accessibility** - Include `aria-label`, `role`, keyboard navigation
- ✅ **Loading States** - Show skeleton or spinner during async operations
- ✅ **Error Boundaries** - Implement error handling

## 📋 Component Template
```typescript
interface ChecklistCardProps {
  item: ChecklistItem;
  onToggle: (id: string) => void;
  loading?: boolean;
  className?: string;
}

const ChecklistCard = ({ 
  item, 
  onToggle, 
  loading = false,
  className = ""
}: ChecklistCardProps) => {
  // State and hooks
  const [isToggling, setIsToggling] = useState(false);
  const { user } = useAuth();

  // Event handlers
  const handleToggle = async () => {
    if (!user || loading) return;
    
    try {
      setIsToggling(true);
      await onToggle(item.id);
    } catch (error) {
      console.error('Toggle failed:', error);
      toast.error('상태 변경에 실패했습니다.');
    } finally {
      setIsToggling(false);
    }
  };

  // Early returns
  if (!item) return null;

  return (
    <Card className={`p-4 transition-all ${className}`}>
      <div className="flex items-start space-x-3">
        <Checkbox
          checked={item.completed}
          onCheckedChange={handleToggle}
          disabled={loading || isToggling}
          aria-label={`${item.title} 완료 상태`}
        />
        <div className="flex-1 min-w-0">
          <h3 className="font-semibold">{item.title}</h3>
          <p className="text-sm text-muted-foreground">{item.description}</p>
        </div>
      </div>
    </Card>
  );
};

export default ChecklistCard;
```

## 🎯 State Management Patterns
- **Local State**: `useState` for component-specific state
- **Server State**: React Query for API data
- **Global State**: Context API for app-wide state
- **Form State**: React Hook Form for complex forms

## 🎨 UI Component Guidelines
```typescript
// ✅ Consistent Card Pattern
<Card className="p-6 space-y-4 hover:shadow-lg transition-all">
  <CardHeader>
    <CardTitle>Title</CardTitle>
    <CardDescription>Description</CardDescription>
  </CardHeader>
  <CardContent>
    {/* Content */}
  </CardContent>
</Card>

// ✅ Button with Loading State
<Button 
  onClick={handleAction}
  disabled={loading}
  className="flex items-center space-x-2"
>
  {loading ? (
    <Loader2 className="h-4 w-4 animate-spin" />
  ) : (
    <Icon className="h-4 w-4" />
  )}
  <span>{loading ? '처리중...' : '액션'}</span>
</Button>

// ✅ Responsive Layout
<div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
  {items.map((item) => (
    <ItemCard key={item.id} item={item} />
  ))}
</div>
```

## 🔄 Event Handling Best Practices
- **Async Operations**: Always use try-catch
- **Loading States**: Show feedback during operations
- **Error Handling**: Provide user-friendly error messages
- **Debouncing**: Use for search/input operations
- **Optimistic Updates**: Update UI immediately, rollback on error

## ♿ Accessibility Requirements
- **Keyboard Navigation**: All interactive elements accessible
- **Screen Readers**: Proper ARIA labels and roles
- **Focus Management**: Visible focus indicators
- **Color Contrast**: Meet WCAG guidelines
- **Semantic HTML**: Use proper HTML elements